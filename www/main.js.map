{"version":3,"sources":["wasm/load.ts","../node_modules/twgl.js/dist/4.x/twgl-full.module.js","rendering/fontsprite/fontsprite.vert","rendering/fontsprite/fontsprite.frag","util/cursor.ts","util/quad.ts","rendering/fontsprite/fontsprite.ts","rendering/renderer.ts","main.ts"],"names":["VecType","Float32Array","setDefaultType","ctor","oldType","create","x","y","z","dst","add","a","b","subtract","lerp","t","lerpV","max","Math","min","mulScalar","v","k","divScalar","cross","t1","t2","dot","length$1","sqrt","lengthSq","distance","dx","dy","dz","distanceSq","normalize","lenSq","len","negate","copy","multiply","divide","v3","Object","freeze","__proto__","length","xAxis","yAxis","zAxis","MatType","setDefaultType$1","negate$1","m","copy$1","identity","transpose","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","inverse","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t3","d","multiply$1","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","setTranslation","getTranslation","getAxis","axis","off","setAxis","perspective","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","PI","rangeInv","ortho","left","right","bottom","top","near","far","frustum","lookAt","eye","target","up","translation","translate","v0","v1","v2","rotationX","angleInRadians","c","cos","s","sin","rotateX","rotationY","rotateY","rotationZ","rotateZ","axisRotation","n","xx","yy","zz","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","scaling","scale","transformPoint","transformDirection","transformNormal","mi","m4","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","glTypeToTypedArray","tt","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","getGLTypeForTypedArray","typedArray","Uint8ClampedArray","Error","getGLTypeForTypedArrayType","typedArrayType","getTypedArrayTypeForGLType","type","CTOR","isArrayBuffer","SharedArrayBuffer","buffer","ArrayBuffer","typedarrays","copyNamedProperties","names","src","forEach","name","value","undefined","copyExistingProperties","keys","key","hasOwnProperty","error","args","console","warn","isBuffer","gl","WebGLBuffer","isRenderbuffer","WebGLRenderbuffer","isShader","WebGLShader","isTexture","WebGLTexture","isSampler","WebGLSampler","STATIC_DRAW","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","BUFFER_SIZE","BYTE$1","UNSIGNED_BYTE$1","SHORT$1","UNSIGNED_SHORT$1","INT$1","UNSIGNED_INT$1","FLOAT$1","defaults","attribPrefix","setAttributePrefix","prefix","setDefaults","newDefaults","setBufferFromTypedArray","array","drawType","bindBuffer","bufferData","createBufferFromTypedArray","createBuffer","isIndices","getNormalizationForTypedArray","getNormalizationForTypedArrayType","getArray","data","texcoordRE","colorRE","guessNumComponentsFromName","numComponents","test","getNumComponents","arrayName","size","makeTypedArray","Array","isArray","Type","createAttribsFromArrays","arrays","attribs","attribName","attrib","normalization","numValues","arrayType","numBytes","BYTES_PER_ELEMENT","stride","offset","divisor","setAttribInfoBufferFromArray","attribInfo","bufferSubData","getBytesPerValueForGLType","positionKeys","getNumElementsFromNonIndexedArrays","ii","numElements","getNumElementsFromAttributes","getBufferParameter","bytesPerValue","totalElements","createBufferInfoFromArrays","srcBufferInfo","newAttribs","bufferInfo","assign","indices","newIndices","elementType","createBufferFromArray","createBuffersFromArrays","buffers","attributes","setAttributeDefaults_","getNumComponents_","getArray_","getArray$1","getNumComponents$1","augmentTypedArray","cursor","push","arguments","jj","reset","opt_index","defineProperty","get","createAugmentedTypedArray","opt_type","allButIndices","deindexVertices","vertices","newVertices","filter","expandToUnindexed","channel","srcBuffer","dstBuffer","constructor","ndx","flattenNormals","normals","normal","numNormals","nax","nay","naz","nbx","nby","nbz","nx","ny","nz","applyFuncToV3Array","matrix","fn","tmp","transformNormal$1","reorientDirections","reorientNormals","reorientPositions","reorientVertices","indexOf","createXYQuadVertices","xOffset","yOffset","position","texcoord","createPlaneVertices","width","depth","subdivisionsWidth","subdivisionsDepth","numVertices","positions","texcoords","u","numVertsAcross","createSphereVertices","radius","subdivisionsAxis","subdivisionsHeight","opt_startLatitudeInRadians","opt_endLatitudeInRadians","opt_startLongitudeInRadians","opt_endLongitudeInRadians","latRange","longRange","theta","phi","sinTheta","cosTheta","sinPhi","ux","uy","uz","numVertsAround","CUBE_FACE_INDICES","createCubeVertices","cornerVertices","faceNormals","uvCoords","faceIndices","uv","createTruncatedConeVertices","bottomRadius","topRadius","height","radialSubdivisions","verticalSubdivisions","opt_topCap","opt_bottomCap","topCap","bottomCap","extra","vertsAroundEdge","slant","atan2","cosSlant","sinSlant","end","ringRadius","expandRLEData","rleData","padding","runLength","element","slice","apply","create3DFVertices","colors","numVerts","color","createCrescentVertices","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","subdivisionsThick","offsetRange","createArc","arcRadius","normalMult","normalAdd","uMult","uAdd","uBack","xBack","angle","px","py","pz","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","createCylinderVertices","createTorusVertices","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ring","ringAngle","xSin","zCos","nextRingIndex","nextSliceIndex","createDiscVertices","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","pow","i","randInt","random","makeRandomVertexColors","options","vColors","rand","numVertsPerColor","vertsPerColor","numSets","createBufferFunc","prototype","call","createBufferInfoFunc","arraySpecPropertyNames","copyElements","dstNdx","createArrayOfSameType","srcArray","arraySrc","newArray","newArraySpec","concatVertices","arrayOfArrays","baseName","arrayInfo","base","newArrays","info","getLengthOfCombinedArrays","arraySpec","spec","copyArraysToNewArray","baseIndex","duplicateVertices","create3DFBufferInfo","create3DFBuffers","createCubeBufferInfo","createCubeBuffers","createPlaneBufferInfo","createPlaneBuffers","createSphereBufferInfo","createSphereBuffers","createTruncatedConeBufferInfo","createTruncatedConeBuffers","createXYQuadBufferInfo","createXYQuadBuffers","createCrescentBufferInfo","createCrescentBuffers","createCylinderBufferInfo","createCylinderBuffers","createTorusBufferInfo","createTorusBuffers","createDiscBufferInfo","createDiscBuffers","createCresentBufferInfo","createCresentBuffers","createCresentVertices","primitives","isWebGL2","texStorage2D","isWebGL1","glEnumToString","haveEnumsForType","enums","addEnums","existing","toString","utils","defaults$1","textureColor","textureOptions","crossOrigin","isArrayBuffer$1","s_ctx","getShared2DContext","document","createElement","getContext","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","DEPTH_COMPONENT","DEPTH_STENCIL","CLAMP_TO_EDGE","NEAREST","LINEAR","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","UNPACK_ALIGNMENT","UNPACK_ROW_LENGTH","UNPACK_IMAGE_HEIGHT","UNPACK_SKIP_PIXELS","UNPACK_SKIP_ROWS","UNPACK_SKIP_IMAGES","UNPACK_COLORSPACE_CONVERSION_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_Y_WEBGL","R8","R8_SNORM","R16F","R32F","R8UI","R8I","RG16UI","RG16I","RG32UI","RG32I","RG8","RG8_SNORM","RG16F","RG32F","RG8UI","RG8I","R16UI","R16I","R32UI","R32I","RGB8","SRGB8","RGB565","RGB8_SNORM","R11F_G11F_B10F","RGB9_E5","RGB16F","RGB32F","RGB8UI","RGB8I","RGB16UI","RGB16I","RGB32UI","RGB32I","RGBA8","SRGB8_ALPHA8","RGBA8_SNORM","RGB5_A1","RGBA4","RGB10_A2","RGBA16F","RGBA32F","RGBA8UI","RGBA8I","RGB10_A2UI","RGBA16UI","RGBA16I","RGBA32I","RGBA32UI","DEPTH_COMPONENT16","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","DEPTH24_STENCIL8","BYTE$2","UNSIGNED_BYTE$2","SHORT$2","UNSIGNED_SHORT$2","INT$2","UNSIGNED_INT$2","FLOAT$2","UNSIGNED_SHORT_4_4_4_4$1","UNSIGNED_SHORT_5_5_5_1$1","UNSIGNED_SHORT_5_6_5$1","HALF_FLOAT$1","HALF_FLOAT_OES","UNSIGNED_INT_2_10_10_10_REV$1","UNSIGNED_INT_10F_11F_11F_REV$1","UNSIGNED_INT_5_9_9_9_REV$1","FLOAT_32_UNSIGNED_INT_24_8_REV$1","UNSIGNED_INT_24_8$1","RG","RG_INTEGER","RED","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","formatInfo","numColorComponents","s_textureInternalFormatInfo","getTextureInternalFormatInfo","internalFormat","textureFormat","colorRenderable","textureFilterable","bytesPerElement","bytesPerElementMap","getBytesPerElementForInternalFormat","getFormatAndTypeForInternalFormat","format","isPowerOf2","canGenerateMipmap","canFilter","getNumComponentsForFormat","getTextureTypeForArrayType","defaultType","guessDimensions","setDefaultTextureColor","setDefaults$1","lastPackState","savePackState","colorspaceConversion","getParameter","pixelStorei","premultiplyAlpha","flipY","restorePackState","saveSkipState","unpackAlignment","unpackRowLength","unpackImageHeight","unpackSkipPixels","unpackSkipRows","unpackSkipImages","restoreSkipState","setTextureSamplerParameters","parameteriFn","minMag","mag","wrap","wrapR","wrapS","wrapT","minLod","maxLod","baseLevel","maxLevel","setTextureParameters","tex","bindTexture","texParameteri","setSamplerParameters","sampler","samplerParameteri","createSampler","createSamplers","samplerOptions","samplers","make1Pixel","setTextureFilteringForSize","generateMipmap","filtering","shouldAutomaticallySetTextureFilteringForSize","auto","level","getCubeFaceOrder","cubeFaceOrder","getCubeFacesWithNdx","faces","facesWithNdx","map","face","sort","setTextureFromElement","formatType","imgWidth","imgHeight","slices","nodeName","ctx","canvas","drawImage","texImage2D","createImageBitmap","colorSpaceConversion","then","imageBitmap","smallest","largest","xMult","yMult","texImage3D","srcX","srcY","texSubImage3D","noop","urlIsSameOrigin","url","href","hostname","location","port","protocol","localOrigin","URL","origin","urlOrigin","setToAnonymousIfUndefinedAndURLIsNotSameOrigin","loadImage","callback","img","Image","clearEventHandlers","removeEventListener","onError","onLoad","msg","addEventListener","ImageBitmap","err","bm","cb","mode","fetch","response","ok","blob","bitmap","setTimeout","catch","e","isTexImageSource","obj","ImageData","HTMLElement","loadAndUseImage","setTextureTo1PixelColor","loadTextureFromUrl","loadCubemapFromUrls","urls","numToLoad","errors","imgs","faceTarget","otherTarget","uploadImg","loadSlicesFromUrls","firstImage","setTextureFromArray","byteLength","dimensions","cbrt","elementsPerElement","faceSize","subarray","setEmptyTexture","createTexture","resizeTexture","isAsyncSrc","createTextures","numDownloading","textures","images","callCallbackIfReady","onLoadFn","setTextureDefaults_","error$1","warn$1","getElementById","id","TEXTURE0","DYNAMIC_DRAW","ARRAY_BUFFER$1","ELEMENT_ARRAY_BUFFER$1","UNIFORM_BUFFER","TRANSFORM_FEEDBACK_BUFFER","TRANSFORM_FEEDBACK","COMPILE_STATUS","LINK_STATUS","FRAGMENT_SHADER","VERTEX_SHADER","SEPARATE_ATTRIBS","ACTIVE_UNIFORMS","ACTIVE_ATTRIBUTES","TRANSFORM_FEEDBACK_VARYINGS","ACTIVE_UNIFORM_BLOCKS","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","FLOAT$3","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT$3","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT$3","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D$1","TEXTURE_CUBE_MAP$1","TEXTURE_3D$1","TEXTURE_2D_ARRAY$1","typeMap","getBindPointForSamplerType","bindPoint","floatSetter","uniform1f","floatArraySetter","uniform1fv","floatVec2Setter","uniform2fv","floatVec3Setter","uniform3fv","floatVec4Setter","uniform4fv","intSetter","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","uintSetter","uniform1ui","uintArraySetter","uniform1uiv","uintVec2Setter","uniform2uiv","uintVec3Setter","uniform3uiv","uintVec4Setter","uniform4uiv","floatMat2Setter","uniformMatrix2fv","floatMat3Setter","uniformMatrix3fv","floatMat4Setter","uniformMatrix4fv","floatMat23Setter","uniformMatrix2x3fv","floatMat32Setter","uniformMatrix3x2fv","floatMat24Setter","uniformMatrix2x4fv","floatMat42Setter","uniformMatrix4x2fv","floatMat34Setter","uniformMatrix3x4fv","floatMat43Setter","uniformMatrix4x3fv","samplerSetter","unit","textureOrPair","texture","activeTexture","bindSampler","samplerArraySetter","units","index","floatAttribSetter","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo","defaultSize","count","rowOffset","setter","arraySetter","attrTypeMap","addLineNumbers","lineOffset","split","line","join","spaceRE","loadShader","shaderSource","shaderType","opt_errorCallback","errFn","shader","createShader","replace","compileShader","getShaderParameter","lastError","getShaderInfoLog","deleteShader","getProgramOptions","opt_attribs","opt_locations","transformFeedbackVaryings","transformFeedbackMode","errorCallback","opt","attribLocations","defaultShaderType","getShaderTypeFromScriptType","scriptType","deleteShaders","shaders","createProgram","progOptions","realShaders","newShaders","elem","text","program","attachShader","bindAttribLocation","varyings","linkProgram","getProgramParameter","getProgramInfoLog","deleteProgram","createShaderFromScript","scriptId","opt_shaderType","shaderScript","createProgramFromScripts","shaderScriptIds","createProgramFromSources","shaderSources","isBuiltIn","startsWith","createUniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","substr","uniformSetters","numUniforms","getActiveUniform","createTransformFeedbackInfo","numVaryings","varying","getTransformFeedbackVarying","bindTransformFeedbackInfo","transformFeedbackInfo","buf","bindBufferRange","bindBufferBase","createTransformFeedback","programInfo","tf","bindTransformFeedback","useProgram","createUniformBlockSpecFromProgram","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","getActiveUniformBlockName","blockSpec","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","arraySuffixRE","createUniformBlockInfoFromProgram","uniformBlockSpec","blockName","uniforms","uniformBufferIndex","uniformBlockBinding","uniformNdx","asFloat","createUniformBlockInfo","bindUniformBlock","uniformBlockInfo","bufferBindIndex","setUniformBlock","setBlockUniforms","values","set","setUniforms","setters","actualSetters","numArgs","aNdx","setUniformsAndBindTextures","createAttributeSetters","attribSetters","numAttribs","getActiveAttrib","getAttribLocation","setAttributes","setBuffersAndAttributes","vertexArrayObject","bindVertexArray","createProgramInfoFromProgram","createProgramInfo","good","source","script","programs","TRIANGLES","UNSIGNED_SHORT$3","drawBufferInfo","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","drawObjectList","objectsToDraw","lastUsedProgramInfo","lastUsedBufferInfo","object","active","vertexArrayInfo","bindBuffers","draw","FRAMEBUFFER","RENDERBUFFER","TEXTURE_2D$2","UNSIGNED_BYTE$3","DEPTH_COMPONENT$1","RGBA$1","RGBA4$1","RGB5_A1$1","RGB565$1","DEPTH_COMPONENT16$1","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL$1","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","CLAMP_TO_EDGE$1","LINEAR$1","defaultAttachments","attachmentsByFormat","getAttachmentPointForFormat","renderbufferFormats","isRenderbufferFormat","createFramebufferInfo","attachments","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","colorAttachmentCount","framebufferInfo","framebuffer","attachmentOptions","attachment","attachmentPoint","createRenderbuffer","bindRenderbuffer","renderbufferStorage","framebufferRenderbuffer","layer","framebufferTextureLayer","framebufferTexture2D","texTarget","resizeFramebufferInfo","bindFramebufferInfo","viewport","framebuffers","ELEMENT_ARRAY_BUFFER$2","createVertexArrayInfo","programInfos","vao","createVertexArray","createVAOAndSetAttributes","createVAOFromBufferInfo","vertexArrays","defaults$2","addExtensionsToContext","setDefaults$2","prefixRE","addExtensionToContext","extensionName","ext","getExtension","fnSuffix","exec","enumSuffix","isFunc","suffix","endsWith","substring","origFn","supportedExtensions","create3DContext","context","getWebGLContext","createContext","resizeCanvasToDisplaySize","multiplier","clientWidth","clientHeight","module","exports"],"mappings":"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","file":"main.js","sourceRoot":"../src","sourcesContent":["interface WasmExports {\n  frame(): void;\n  memory: {\n    buffer: ArrayBuffer;\n  };\n  CONFIG: { value: number };\n  SCREEN: { value: number };\n}\n\ntype State = {\n  instance: WebAssembly.Instance;\n  exports: WasmExports;\n};\n\nexport class WasmProgram {\n  state: State;\n\n  constructor(state: State) {\n    this.state = state;\n  }\n\n  static async load(wasmSrc: string) {\n    const { instance } = await WebAssembly.instantiateStreaming(\n      fetch(wasmSrc),\n      {\n        env: {\n          prn: (addr: number, len: number) => {\n            const exports = (instance.exports as unknown) as WasmExports;\n            const raw = new Uint8ClampedArray(exports.memory.buffer, addr, len);\n            const decoder = new TextDecoder(\"utf8\");\n            console.info(decoder.decode(raw));\n          },\n        },\n      }\n    );\n\n    const exports = (instance.exports as unknown) as WasmExports;\n    return new WasmProgram({ instance, exports });\n  }\n\n  tick() {\n    this.state.exports.frame();\n  }\n\n  get config() {\n    const view = new DataView(\n      this.state.exports.memory.buffer,\n      this.state.exports.CONFIG.value,\n      2\n    );\n    return {\n      cols: view.getUint8(0),\n      rows: view.getUint8(1),\n    };\n  }\n\n  get screen() {\n    const { rows, cols } = this.config;\n    return new DataView(\n      this.state.exports.memory.buffer,\n      this.state.exports.SCREEN.value,\n      rows * cols\n    );\n  }\n}\n","/* @license twgl.js 4.15.0 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\n\nlet VecType = Float32Array;\n\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\nfunction setDefaultType(ctor) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\nfunction create(x, y, z) {\n  const dst = new VecType(3);\n  if (x) {\n    dst[0] = x;\n  }\n  if (y) {\n    dst[1] = y;\n  }\n  if (z) {\n    dst[2] = z;\n  }\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\nfunction dot(a, b) {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distance(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n\n  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  const len = Math.sqrt(lenSq);\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\nfunction negate(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\nfunction copy(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy,\n  create: create,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply,\n  negate: negate,\n  normalize: normalize,\n  setDefaultType: setDefaultType,\n  subtract: subtract\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nlet MatType = Float32Array;\n\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\nfunction setDefaultType$1(ctor) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\nfunction negate$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];\n  dst[ 1] = -m[ 1];\n  dst[ 2] = -m[ 2];\n  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];\n  dst[ 5] = -m[ 5];\n  dst[ 6] = -m[ 6];\n  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];\n  dst[ 9] = -m[ 9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\nfunction copy$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];\n  dst[ 1] = m[ 1];\n  dst[ 2] = m[ 2];\n  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];\n  dst[ 5] = m[ 5];\n  dst[ 6] = m[ 6];\n  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];\n  dst[ 9] = m[ 9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n function transpose(m, dst) {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;\n  dst[ 1] = m10;\n  dst[ 2] = m20;\n  dst[ 3] = m30;\n  dst[ 4] = m01;\n  dst[ 5] = m11;\n  dst[ 6] = m21;\n  dst[ 7] = m31;\n  dst[ 8] = m02;\n  dst[ 9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp_0  = m22 * m33;\n  const tmp_1  = m32 * m23;\n  const tmp_2  = m12 * m33;\n  const tmp_3  = m32 * m13;\n  const tmp_4  = m12 * m23;\n  const tmp_5  = m22 * m13;\n  const tmp_6  = m02 * m33;\n  const tmp_7  = m32 * m03;\n  const tmp_8  = m02 * m23;\n  const tmp_9  = m22 * m03;\n  const tmp_10 = m02 * m13;\n  const tmp_11 = m12 * m03;\n  const tmp_12 = m20 * m31;\n  const tmp_13 = m30 * m21;\n  const tmp_14 = m10 * m31;\n  const tmp_15 = m30 * m11;\n  const tmp_16 = m10 * m21;\n  const tmp_17 = m20 * m11;\n  const tmp_18 = m00 * m31;\n  const tmp_19 = m30 * m01;\n  const tmp_20 = m00 * m21;\n  const tmp_21 = m20 * m01;\n  const tmp_22 = m00 * m11;\n  const tmp_23 = m10 * m01;\n\n  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\nfunction multiply$1(a, b, dst) {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\nfunction getTranslation(m, dst) {\n  dst = dst || create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\nfunction getAxis(m, axis, dst) {\n  dst = dst || create();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy$1(a, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  const rangeInv = 1.0 / (zNear - zFar);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\nlet xAxis;\nlet yAxis;\nlet zAxis;\n\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || create();\n  yAxis = yAxis || create();\n  zAxis = zAxis || create();\n\n  normalize(\n      subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];\n  dst[ 1] = xAxis[1];\n  dst[ 2] = xAxis[2];\n  dst[ 3] = 0;\n  dst[ 4] = yAxis[0];\n  dst[ 5] = yAxis[1];\n  dst[ 6] = yAxis[2];\n  dst[ 7] = 0;\n  dst[ 8] = zAxis[0];\n  dst[ 9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = c;\n  dst[ 6] = s;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = 0;\n  dst[ 2] = -s;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = s;\n  dst[ 9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = s;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = -s;\n  dst[ 5] = c;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = v[1];\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || create();\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\nfunction transformNormal(m, v, dst) {\n  dst = dst || create();\n  const mi = inverse(m);\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy$1,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply$1,\n  negate: negate$1,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType$1,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\nconst BYTE                           = 0x1400;\nconst UNSIGNED_BYTE                  = 0x1401;\nconst SHORT                          = 0x1402;\nconst UNSIGNED_SHORT                 = 0x1403;\nconst INT                            = 0x1404;\nconst UNSIGNED_INT                   = 0x1405;\nconst FLOAT                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE]                           = Int8Array;\n  tt[UNSIGNED_BYTE]                  = Uint8Array;\n  tt[SHORT]                          = Int16Array;\n  tt[UNSIGNED_SHORT]                 = Uint16Array;\n  tt[INT]                            = Int32Array;\n  tt[UNSIGNED_INT]                   = Uint32Array;\n  tt[FLOAT]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;\n  tt[HALF_FLOAT]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error(...args) {\n  console.error(...args);\n}\n\nfunction warn(...args) {\n  console.warn(...args);\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;\n}\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE$1                         = 0x1400;\nconst UNSIGNED_BYTE$1                = 0x1401;\nconst SHORT$1                        = 0x1402;\nconst UNSIGNED_SHORT$1               = 0x1403;\nconst INT$1                          = 0x1404;\nconst UNSIGNED_INT$1                 = 0x1405;\nconst FLOAT$1                        = 0x1406;\nconst defaults = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let buffer;\n        let type;\n        let normalization;\n        let numComponents;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          const numValues = array.data || array;\n          const arrayType = array.type || Float32Array;\n          const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(ARRAY_BUFFER, buffer);\n          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n        } else {\n          const typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE$1)  return 1;  // eslint-disable-line\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT$1) return 2;  // eslint-disable-line\n  if (type === INT$1)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT$1)   return 4;  // eslint-disable-line\n  if (type === FLOAT$1)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray(array).length;\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults,\n  getNumComponents_: getNumComponents,\n  getArray_: getArray\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst getArray$1 = getArray;  // eslint-disable-line\nconst getNumComponents$1 = getNumComponents;  // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\nfunction augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function() {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (value instanceof Array || isArrayBuffer(value)) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function(opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function() {\n      return this.length / this.numComponents | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\nfunction deindexVertices(vertices) {\n  const indices = vertices.indices;\n  const newVertices = {};\n  const numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    const srcBuffer = vertices[channel];\n    const numComponents = srcBuffer.numComponents;\n    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n    for (let ii = 0; ii < numElements; ++ii) {\n      const ndx = indices[ii];\n      const offset = ndx * numComponents;\n      for (let jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n  return newVertices;\n}\n\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  const normals = vertices.normal;\n  const numNormals = normals.length;\n  for (let ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    const nax = normals[ii + 0];\n    const nay = normals[ii + 1];\n    const naz = normals[ii + 2];\n\n    const nbx = normals[ii + 3];\n    const nby = normals[ii + 4];\n    const nbz = normals[ii + 5];\n\n    const ncx = normals[ii + 6];\n    const ncy = normals[ii + 7];\n    const ncz = normals[ii + 8];\n\n    // add them\n    let nx = nax + nbx + ncx;\n    let ny = nay + nby + ncy;\n    let nz = naz + nbz + ncz;\n\n    // normalize them\n    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= length;\n    ny /= length;\n    nz /= length;\n\n    // copy them back in\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  const len = array.length;\n  const tmp = new Float32Array(3);\n  for (let ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii    ] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal$1(mi, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal$1);\n  return array;\n}\n\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function(name) {\n    const array = arrays[name];\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  };\n}\n\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createPlaneVertices(\n    width,\n    depth,\n    subdivisionsWidth,\n    subdivisionsDepth,\n    matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  const arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  }, matrix);\n  return arrays;\n}\n\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createSphereVertices(\n    radius,\n    subdivisionsAxis,\n    subdivisionsHeight,\n    opt_startLatitudeInRadians,\n    opt_endLatitudeInRadians,\n    opt_startLongitudeInRadians,\n    opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);\n\n  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + opt_startLongitudeInRadians;\n      const phi = latRange * v + opt_startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createCubeVertices(size) {\n  size = size || 1;\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTruncatedConeVertices(\n    bottomRadius,\n    topRadius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    opt_topCap,\n    opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const topCap = (opt_topCap === undefined) ? true : opt_topCap;\n  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  const data = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction create3DFVertices() {\n\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2,  numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n function createCrescentVertices(\n    verticalRadius,\n    outerRadius,\n    innerRadius,\n    thickness,\n    subdivisionsDown,\n    startOffset,\n    endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset   = endOffset || 1;\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = add(multiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */\nfunction createCylinderVertices(\n    radius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    topCap,\n    bottomCap) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTorusVertices(\n    radius,\n    thickness,\n    radialSubdivisions,\n    bodySubdivisions,\n    startAngle,\n    endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createDiscVertices(\n    radius,\n    divisions,\n    stacks,\n    innerRadius,\n    stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0;\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  const numElements = vertices.position.numElements;\n  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n  const rand = options.rand || function(ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n  vertices.color = vColors;\n  if (vertices.indices) {\n    // just make random colors if index\n    for (let ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    const numVertsPerColor = options.vertsPerColor || 3;\n    const numSets = numElements / numVertsPerColor;\n    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line\n      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n      for (let jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n  return vertices;\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\nfunction createBufferFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\nfunction createBufferInfoFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nconst arraySpecPropertyNames = [\n  \"numComponents\",\n  \"size\",\n  \"type\",\n  \"normalize\",\n  \"stride\",\n  \"offset\",\n  \"attrib\",\n  \"name\",\n  \"attribName\",\n];\n\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  const length = src.length;\n  for (let ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\nfunction createArrayOfSameType(srcArray, length) {\n  const arraySrc = getArray$1(srcArray);\n  const newArray = new arraySrc.constructor(length);\n  let newArraySpec = newArray;\n  // If it appears to have been augmented make new one augmented\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  }\n  // If it was a full spec make new one a full spec\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray,\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n  return newArraySpec;\n}\n\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction concatVertices(arrayOfArrays) {\n  const names = {};\n  let baseName;\n  // get names of all arrays.\n  // and numElements for each set of vertices\n  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n    const arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n      const arrayInfo = arrays[name];\n      const numComponents = getNumComponents$1(arrayInfo, name);\n      const array = getArray$1(arrayInfo);\n      const numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  }\n\n  // compute length of combined array\n  // and return one for reference\n  function getLengthOfCombinedArrays(name) {\n    let length = 0;\n    let arraySpec;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      length += array.length;\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n    return {\n      length: length,\n      spec: arraySpec,\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    let baseIndex = 0;\n    let offset = 0;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n      offset += array.length;\n    }\n  }\n\n  const base = names[baseName];\n\n  const newArrays = {};\n  Object.keys(names).forEach(function(name) {\n    const info = getLengthOfCombinedArrays(name);\n    const newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray$1(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction duplicateVertices(arrays) {\n  const newArrays = {};\n  Object.keys(arrays).forEach(function(name) {\n    const arraySpec = arrays[name];\n    const srcArray = getArray$1(arraySpec);\n    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray$1(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nconst create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nconst create3DFBuffers = createBufferFunc(create3DFVertices);\nconst createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nconst createCubeBuffers = createBufferFunc(createCubeVertices);\nconst createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nconst createPlaneBuffers = createBufferFunc(createPlaneVertices);\nconst createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nconst createSphereBuffers = createBufferFunc(createSphereVertices);\nconst createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nconst createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nconst createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nconst createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nconst createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nconst createCrescentBuffers = createBufferFunc(createCrescentVertices);\nconst createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nconst createCylinderBuffers = createBufferFunc(createCylinderVertices);\nconst createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nconst createTorusBuffers = createBufferFunc(createTorusVertices);\nconst createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nconst createDiscBuffers = createBufferFunc(createDiscVertices);\n\n// these were mis-spelled until 4.12\nconst createCresentBufferInfo = createCrescentBufferInfo;\nconst createCresentBuffers = createCrescentBuffers;\nconst createCresentVertices = createCrescentVertices;\n\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (\"0x\" + value.toString(16));\n  };\n}());\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer$1 = isArrayBuffer;\n\n// Should we make this on demand?\nlet s_ctx;\nfunction getShared2DContext() {\n  s_ctx = s_ctx ||\n      ((typeof document !== 'undefined' && document.createElement)\n        ? document.createElement(\"canvas\").getContext(\"2d\")\n        : null);\n  return s_ctx;\n}\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT                = 0x1902;\nconst DEPTH_STENCIL                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D                     = 0x0de1;\nconst TEXTURE_CUBE_MAP               = 0x8513;\nconst TEXTURE_3D                     = 0x806f;\nconst TEXTURE_2D_ARRAY               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\n\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1                      = 0x8057;\nconst RGBA4                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16            = 0x81A5;\nconst DEPTH_COMPONENT24            = 0x81A6;\nconst DEPTH_COMPONENT32F           = 0x8CAC;\nconst DEPTH32F_STENCIL8            = 0x8CAD;\nconst DEPTH24_STENCIL8             = 0x88F0;\n\n/* DataType */\nconst BYTE$2                         = 0x1400;\nconst UNSIGNED_BYTE$2                = 0x1401;\nconst SHORT$2                        = 0x1402;\nconst UNSIGNED_SHORT$2               = 0x1403;\nconst INT$2                          = 0x1404;\nconst UNSIGNED_INT$2                 = 0x1405;\nconst FLOAT$2                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\nconst HALF_FLOAT$1                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$2], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$2], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$2], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$2], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$2], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$2], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$2], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$2], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$2], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$2], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$2], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$2], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$2], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$2], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$2], };\n    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1], };\n    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$2], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$2], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$2], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$2], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$2], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8$1], };\n    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer$1(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE$2;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n// NOTE: While querying GL is considered slow it's not remotely as slow\n// as uploading a texture. On top of that you're unlikely to call this in\n// a perf critical loop. Even if upload a texture every frame that's unlikely\n// to be more than 1 or 2 textures a frame. In other words, the benefits of\n// making the API easy to use outweigh any supposed perf benefits\n//\n// Also note I get that having one global of these is bad practice.\n// As long as it's used correctly it means no garbage which probably\n// doesn't matter when dealing with textures but old habits die hard.\nconst lastPackState = {};\n\n/**\n * Saves any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction savePackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    lastPackState.colorspaceConversion = gl.getParameter(UNPACK_COLORSPACE_CONVERSION_WEBGL);\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    lastPackState.premultiplyAlpha = gl.getParameter(UNPACK_PREMULTIPLY_ALPHA_WEBGL);\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    lastPackState.flipY = gl.getParameter(UNPACK_FLIP_Y_WEBGL);\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Restores any packing state that was set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction restorePackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, lastPackState.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, lastPackState.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, lastPackState.flipY);\n  }\n}\n\n/**\n * Saves state related to data size\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction saveSkipState(gl) {\n  lastPackState.unpackAlignment   = gl.getParameter(UNPACK_ALIGNMENT);\n  if (isWebGL2(gl)) {\n    lastPackState.unpackRowLength   = gl.getParameter(UNPACK_ROW_LENGTH);\n    lastPackState.unpackImageHeight = gl.getParameter(UNPACK_IMAGE_HEIGHT);\n    lastPackState.unpackSkipPixels  = gl.getParameter(UNPACK_SKIP_PIXELS);\n    lastPackState.unpackSkipRows    = gl.getParameter(UNPACK_SKIP_ROWS);\n    lastPackState.unpackSkipImages  = gl.getParameter(UNPACK_SKIP_IMAGES);\n  }\n}\n\n/**\n * Restores state related to data size\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction restoreSkipState(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT,    lastPackState.unpackAlignment);\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH,   lastPackState.unpackRowLength);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, lastPackState.unpackImageHeight);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS,  lastPackState.unpackSkipPixels);\n    gl.pixelStorei(UNPACK_SKIP_ROWS,    lastPackState.unpackSkipRows);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES,  lastPackState.unpackSkipImages);\n  }\n}\n\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n  if (isArrayBuffer$1(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  const target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  savePackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          savePackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          restorePackState(gl, options);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    saveSkipState(gl);\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    restoreSkipState(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  restorePackState(gl, options);\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D;\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          savePackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          restorePackState(gl, options);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D_ARRAY;\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        savePackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        restorePackState(gl, options);\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer$1(src)) {\n    const Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  saveSkipState(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  savePackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  restorePackState(gl, options);\n  restoreSkipState(gl);\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  savePackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n  restorePackState(gl, options);\n}\n\n/**\n * Creates a texture based on the options passed in.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer$1(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer$1(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer$1(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error$1 = error;\nconst warn$1 = warn;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER$1                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT$3                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT$3                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT$3                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D$1                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP$1              = 0x8513;\nconst TEXTURE_3D$1                    = 0x806F;\nconst TEXTURE_2D_ARRAY$1              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT$3]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  };\ntypeMap[INT$3]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    };\ntypeMap[UNSIGNED_INT$3]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 16, setter: floatMat2Setter,  };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 36, setter: floatMat3Setter,  };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 24, setter: floatMat23Setter, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 24, setter: floatMat32Setter, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 32, setter: floatMat42Setter, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 48, setter: floatMat43Setter, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT$3;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index + i, b.divisor);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT$3]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT$3]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT$3]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\nfunction addLineNumbers(src, lineOffset) {\n  lineOffset = lineOffset || 0;\n  ++lineOffset;\n\n  return src.split(\"\\n\").map(function(line, ndx) {\n    return (ndx + lineOffset) + \": \" + line;\n  }).join(\"\\n\");\n}\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.\n * @return {WebGLShader} The created shader.\n * @private\n */\nfunction loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n  const errFn = opt_errorCallback || error$1;\n  // Create the shader object\n  const shader = gl.createShader(shaderType);\n\n  // Remove the first end of line because WebGL 2.0 requires\n  // #version 300 es\n  // as the first line. No whitespace allowed before that line\n  // so\n  //\n  // <script>\n  // #version 300 es\n  // </script>\n  //\n  // Has one line before it which is invalid according to GLSL ES 3.00\n  //\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n\n  // Load the shader source\n  gl.shaderSource(shader, shaderSource);\n\n  // Compile the shader\n  gl.compileShader(shader);\n\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    errFn(addLineNumbers(shaderSource, lineOffset) + \"\\n*** Error compiling shader: \" + lastError);\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback) {\n      return opt_attribs;\n    }\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n  }\n\n  const options = {\n    errorCallback: opt_errorCallback || error$1,\n    transformFeedbackVaryings: transformFeedbackVaryings,\n    transformFeedbackMode: transformFeedbackMode,\n  };\n\n  if (opt_attribs) {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function(shader) {\n    gl.deleteShader(shader);\n  });\n}\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program and calls useProgram.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const realShaders = [];\n  const newShaders = [];\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof (shader) === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = loadShader(gl, src, type, progOptions.errorCallback);\n      newShaders.push(shader);\n    }\n    if (isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    progOptions.errorCallback(\"not enough shaders for program\");\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n\n  const program = gl.createProgram();\n  realShaders.forEach(function(shader) {\n    gl.attachShader(program, shader);\n  });\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function(attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n  let varyings = progOptions.transformFeedbackVaryings;\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);\n  }\n  gl.linkProgram(program);\n\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    progOptions.errorCallback(\"Error in program linking:\" + lastError);\n\n    gl.deleteProgram(program);\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n  return program;\n}\n\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\nfunction createShaderFromScript(\n    gl, scriptId, opt_shaderType, opt_errorCallback) {\n  let shaderSource = \"\";\n  const shaderScript = getElementById(scriptId);\n  if (!shaderScript) {\n    throw new Error(`unknown script element: ${scriptId}`);\n  }\n  shaderSource = shaderScript.text;\n\n  const shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n  if (!shaderType) {\n    throw new Error('unknown shader type');\n  }\n\n  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n    const shader = createShaderFromScript(\n        gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderSources.length; ++ii) {\n    const shader = loadShader(\n        gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo) {\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === \"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = { };\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n        continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.substr(-3) === \"[0]\") {\n      name = name.substr(0, name.length - 3);\n    }\n    const setter = createUniformSetter(program, uniformInfo);\n    uniformSetters[name] = setter;\n  }\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      break;\n    }\n    // REMOVE [0]?\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: ii,\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object.<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn$1(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const length = data.size * typeInfo.size;\n    let name = data.name;\n    if (name.substr(0, prefix.length) === prefix) {\n      name = name.substr(prefix.length);\n    }\n    uniforms[name] = new Type(array, data.offset, length / Type.BYTES_PER_ELEMENT);\n  });\n  return {\n    name: blockName,\n    array: array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer: buffer,\n    uniforms: uniforms,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const uniforms = uniformBlockInfo.uniforms;\n  for (const name in values) {\n    const array = uniforms[name];\n    if (array) {\n      const value = values[name];\n      if (value.length) {\n        array.set(value);\n      } else {\n        array[0] = value;\n      }\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, values) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = arguments.length;\n  for (let aNdx = 1; aNdx < numArgs; ++aNdx) {\n    const values = arguments[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n        continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpace] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program: program,\n    uniformSetters: uniformSetters,\n    attribSetters: attribSetters,\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  let good = true;\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (source.indexOf(\"\\n\") < 0) {\n      const script = getElementById(source);\n      if (!script) {\n        progOptions.errorCallback(\"no element with id: \" + source);\n        good = false;\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n  if (!good) {\n    return null;\n  }\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n  return createProgramInfoFromProgram(gl, program);\n}\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT$3                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D$2                     = 0x0de1;\n\nconst UNSIGNED_BYTE$3                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT$1                = 0x1902;\nconst RGBA$1                           = 0x1908;\n\n/* Framebuffer Object. */\nconst RGBA4$1                          = 0x8056;\nconst RGB5_A1$1                        = 0x8057;\nconst RGB565$1                         = 0x8D62;\nconst DEPTH_COMPONENT16$1              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL$1                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\nconst CLAMP_TO_EDGE$1                  = 0x812F;\nconst LINEAR$1                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attach] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {WebGLObject} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA$1, type: UNSIGNED_BYTE$3, min: LINEAR$1, wrap: CLAMP_TO_EDGE$1, },\n  { format: DEPTH_STENCIL$1, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16$1] = DEPTH_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format) {\n  return attachmentsByFormat[format];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4$1] = true;\nrenderbufferFormats[RGB5_A1$1] = true;\nrenderbufferFormats[RGB565$1] = true;\nrenderbufferFormats[DEPTH_STENCIL$1] = true;\nrenderbufferFormats[DEPTH_COMPONENT16$1] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {WebGLObject[]} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  let colorAttachmentCount = 0;\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n  attachments.forEach(function(attachmentOptions) {\n    let attachment = attachmentOptions.attachment;\n    const format = attachmentOptions.format;\n    let attachmentPoint = getAttachmentPointForFormat(format);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;\n    }\n    if (!attachment) {\n      if (isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR$1;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR$1;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE$1;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE$1;\n        }\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.texTarget || TEXTURE_2D$2,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    if (isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER$2           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER$2, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$2 = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n  setDefaults(newDefaults);  // eslint-disable-line\n  setDefaults$1(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoFromProgram, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults$2 as setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };\n","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nattribute vec2 position;\\nattribute vec2 texCoord;\\n\\nvarying vec2 v_texCoord;\\n\\nvoid main() {\\n  v_texCoord = texCoord;\\n  gl_Position = vec4(position, 0.0, 1.0);\\n}\\n\";","module.exports=\"\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec2 v_texCoord;\\n\\nuniform sampler2D narrowFont;\\nuniform sampler2D squareFont;\\nuniform sampler2D charsTexture;\\nuniform vec2 fontTileCount;\\nuniform vec2 screenTileCount;\\n\\nvoid main() {\\n  vec4 charSample = texture2D(charsTexture, v_texCoord);\\n  vec2 char = (charSample.xy * 255.0);\\n\\n  bool doubleWidth = charSample.z > 0.5;\\n\\n  vec2 fontTileCountScaled = doubleWidth\\n    ? vec2(fontTileCount.x * 2.0, fontTileCount.y)\\n    : fontTileCount;\\n  vec2 spriteSize = 1.0 / fontTileCountScaled;\\n  vec2 fontTextureStartOffset = char * spriteSize;\\n\\n  vec2 spriteOffset = vec2(\\n    mod((v_texCoord.x * screenTileCount.x), 1.0),\\n    mod((v_texCoord.y * screenTileCount.y), 1.0)\\n  ) * spriteSize;\\n\\n  vec2 fontTextureOffset = fontTextureStartOffset + spriteOffset;\\n\\n  vec4 fontCol = doubleWidth\\n    ? texture2D(squareFont, fontTextureOffset)\\n    //? vec4(spriteOffset / spriteSize, 0.0, 1.0)\\n    : texture2D(narrowFont, fontTextureOffset);\\n\\n  //gl_FragColor = vec4(v_texCoord.x, 0.0, v_texCoord.y, 1.0);\\n  gl_FragColor = fontCol;\\n}\\n\";","export class Float32Cursor {\n  data: Float32Array;\n  offset: number;\n\n  constructor(length: number) {\n    this.data = new Float32Array(length);\n    this.offset = 0;\n  }\n\n  push(a: number) {\n    this.data[this.offset] = a;\n    this.offset += 1;\n  }\n\n  push2(a: number, b: number) {\n    this.push(a);\n    this.push(b);\n  }\n}\n\nexport class ArrayBufferCursor {\n  view: DataView;\n  offset: number;\n\n  constructor(buffer: ArrayBuffer) {\n    this.view = new DataView(buffer);\n    this.offset = 0;\n  }\n\n  f2(f32_a: number, f32_b: number) {\n    this.view.setFloat32(this.offset, f32_a);\n    this.offset += 4;\n    this.view.setFloat32(this.offset, f32_b);\n    this.offset += 4;\n  }\n}\n","import { Float32Cursor } from \"./cursor\";\n\nexport function quad(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n): Float32Array {\n  const cursor = new Float32Cursor(12);\n  // Bottom left\n  cursor.push2(x1, y1);\n  cursor.push2(x2, y2);\n  cursor.push2(x1, y2);\n\n  // Top right\n  cursor.push2(x1, y1);\n  cursor.push2(x2, y1);\n  cursor.push2(x2, y2);\n\n  return cursor.data;\n}\n","import * as twgl from \"twgl.js\";\nimport vertSrc from \"./fontsprite.vert\";\nimport fragSrc from \"./fontsprite.frag\";\nimport { quad } from \"../../util/quad\";\n\ntype State = {\n  gl: WebGLRenderingContext;\n\n  programInfo: twgl.ProgramInfo;\n  bufferInfo: twgl.BufferInfo;\n  charsTexture: WebGLTexture;\n\n  cols: number;\n  rows: number;\n  textureData: Uint8Array;\n};\n\nexport class FontSpriteProgram {\n  state: State;\n  constructor(gl: WebGLRenderingContext) {\n    const arrays = {\n      position: {\n        numComponents: 2,\n        data: quad(-1, 1, 1, -1),\n      },\n      texCoord: {\n        numComponents: 2,\n        data: quad(0, 0, 1, 1),\n      },\n    };\n\n    const programInfo = twgl.createProgramInfo(gl, [vertSrc, fragSrc]);\n    const bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n    const textureData = new Uint8Array(4);\n    const opts = {\n      src: textureData,\n      width: 1,\n      height: 1,\n      format: gl.RGBA,\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n      wrap: gl.CLAMP_TO_EDGE,\n    };\n    const charsTexture = twgl.createTexture(gl, opts);\n\n    this.state = {\n      gl,\n      cols: 0,\n      rows: 0,\n      programInfo,\n      bufferInfo,\n      charsTexture,\n      textureData,\n    };\n  }\n\n  updateScreenTexture(cols: number, rows: number, data: DataView) {\n    const { gl, charsTexture } = this.state;\n\n    let offset = 0;\n    const chars = cols * rows;\n    if (this.state.textureData.length < chars * 4) {\n      this.state.textureData = new Uint8Array(chars * 4);\n    }\n\n    const setChar = (i: number, x: number, y: number, doubleWidth: boolean) => {\n      this.state.textureData[i * 4] = x;\n      this.state.textureData[i * 4 + 1] = y;\n      // Flag to tell the shader to double number of tiles\n      this.state.textureData[i * 4 + 2] = doubleWidth ? 255 : 0;\n    };\n\n    while (offset < chars) {\n      const charCode = data.getUint8(offset);\n      const x = charCode % 16;\n      const y = Math.floor(charCode / 16);\n\n      if (charCode !== 255) {\n        // Narrow char\n        setChar(offset, x, y, false);\n      } else {\n        // Double width char\n        // Read the next byte to see what char to print\n        const charCode = data.getUint8(offset + 1);\n        const x = charCode % 16;\n        const y = Math.floor(charCode / 16);\n\n        setChar(offset, x * 2, y, true);\n        setChar(offset + 1, x * 2 + 1, y, true);\n\n        // Consume the extra char\n        offset += 1;\n      }\n\n      offset += 1;\n    }\n\n    this.state.cols = cols;\n    this.state.rows = rows;\n    twgl.setTextureFromArray(gl, charsTexture, this.state.textureData, {\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n      width: cols,\n      height: rows,\n      wrap: gl.CLAMP_TO_EDGE,\n    });\n  }\n\n  render(narrowFont: WebGLTexture, squareFont: WebGLTexture) {\n    const { gl } = this.state;\n\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    gl.enable(gl.BLEND);\n\n    gl.useProgram(this.state.programInfo.program);\n    twgl.setBuffersAndAttributes(\n      gl,\n      this.state.programInfo,\n      this.state.bufferInfo\n    );\n    twgl.setUniforms(this.state.programInfo, {\n      narrowFont,\n      squareFont,\n      charsTexture: this.state.charsTexture,\n      fontTileCount: [16, 16],\n      screenTileCount: [this.state.cols, this.state.rows],\n    });\n    twgl.drawBufferInfo(gl, this.state.bufferInfo);\n  }\n}\n","import { FontSpriteProgram } from \"./fontsprite/fontsprite\";\nimport * as twgl from \"twgl.js\";\n\ntype Fonts = {\n  narrow: string;\n  square: string;\n};\n\nexport class Renderer {\n  state: {\n    gl: WebGLRenderingContext;\n    fontSpriteProgram: FontSpriteProgram;\n    narrowFontTexture: WebGLTexture;\n    squareFontTexture: WebGLTexture;\n  };\n\n  constructor(canvas: HTMLCanvasElement, fonts: Fonts) {\n    const gl = canvas.getContext(\"webgl\");\n    if (gl == null) {\n      throw new Error(\"Could not start webgl\");\n    }\n\n    const narrowFontTexture = twgl.createTexture(gl, {\n      src: fonts.narrow,\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n    });\n    const squareFontTexture = twgl.createTexture(gl, {\n      src: fonts.square,\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n    });\n\n    this.state = {\n      gl,\n      fontSpriteProgram: new FontSpriteProgram(gl),\n      narrowFontTexture,\n      squareFontTexture,\n    };\n  }\n\n  clear() {\n    const { gl } = this.state;\n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n  }\n\n  render() {\n    this.clear();\n    this.state.fontSpriteProgram.render(\n      this.state.narrowFontTexture,\n      this.state.squareFontTexture\n    );\n  }\n}\n","import { WasmProgram } from \"./wasm/load\";\nimport { Renderer } from \"./rendering/renderer\";\n\ndeclare var window: Window & {\n  start?: (wasm: string) => void;\n};\n\nconst pauseButton = document.getElementById(\"pause\") as HTMLButtonElement;\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst debugEl = document.getElementById(\"debug\") as HTMLPreElement;\n\nwindow.start = async (wasmSrc: string) => {\n  const renderer = new Renderer(canvas, {\n    narrow: \"./text-font.png\",\n    square: \"./text-font-square.png\",\n  });\n  const program = await WasmProgram.load(wasmSrc);\n  let paused = false;\n\n  pauseButton.addEventListener(\"click\", () => {\n    paused = !paused;\n    pauseButton.innerText = paused ? \"Play\" : \"Pause\";\n  });\n\n  const frame = (_t: number) => {\n    let debug: object = {};\n\n    if (paused) {\n      requestAnimationFrame(frame);\n      return;\n    }\n\n    const start = performance.now();\n\n    program.tick();\n\n    const config = program.config;\n    const screen = program.screen;\n    debug.x = screen.getUint8(50);\n    renderer.state.fontSpriteProgram.updateScreenTexture(\n      config.cols,\n      config.rows,\n      screen\n    );\n\n    renderer.render();\n\n    const end = performance.now();\n    debug.time = end - start + \"ms\";\n    debugEl.innerText = JSON.stringify(debug, undefined, 2);\n\n    requestAnimationFrame(frame);\n  };\n  frame();\n};\n"]}